on:
  push: {}
  pull_request: {}

jobs:
  ubuntu:
    runs-on: ${{matrix.os}}
    env:
      PYVERSIONS: ${{matrix.pyversions}}
    steps:
    - name: Checkout
      uses: actions/checkout@v2
    - name: 'Build CI'
      run: |
        cd $GITHUB_WORKSPACE
        ./ci/build_linux.sh
    - name: Upload Artifacts
      uses: actions/upload-artifact@v2
      with:
        name: python-wheels-linux
        path: bindings/python/dist/*
    strategy:
      matrix:
        include:
          - os: ubuntu-20.04
            pyversions: "python3.8 python3.9"
          - os: ubuntu-18.04
            pyversions: "python3.8"

  windows:
    runs-on: windows-2019
    env:
      CI_ARCH: ${{matrix.CI_ARCH}}
      BUILDING_SYNTHIZER: "1"
      CI_WINDOWS: "1"
    steps:
    - name: Checkout
      uses: actions/checkout@v2
    - name: Cache Pip
      uses: actions/cache@v2
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{matrix.CI_ARCH}}
        restore-keys: |
          ${{ runner.os }}-pip-${{matrix.CI_ARCH}}
    - name: Configure MSVC Environment Variables
      shell: cmd
      run: |
        call "C:\Program Files (x86)\Microsoft Visual Studio\2019\enterprise\VC\Auxiliary\Build\vcvars%CI_ARCH%.bat"
        set > %GITHUB_ENV%
    - name: Build C Libraries
      shell: powershell
      run: |
        set-location $Env:GITHUB_WORKSPACE
        ./ci/build_c.ps1
    - name: Build python Wheels
      shell: powershell
      run: |
        set-location $Env:GITHUB_WORKSPACE
        ./ci/build_python.ps1
    - name: Upload Artifacts
      uses: actions/upload-artifact@v2
      with:
        name: python-wheels-win${{matrix.CI_ARCH}}
        path: bindings/python/dist/*
    strategy:
      fail-fast: true
      matrix:
        CI_ARCH: ['32', '64']

  osx:
    runs-on: macos-latest
    steps:
    - name: Checkout
      uses: actions/checkout@v2
    - shell: bash
      run:  |
        set -ex
        brew install ninja
        cd $GITHUB_WORKSPACE
        mkdir build
        cd build
        cmake -G Ninja ..
        ninja
        ninja test

  python_sdist:
    runs-on: ubuntu-20.04
    steps:
    - name: Checkout
      uses: actions/checkout@v2
    - name: Build Python sdist
      run: |
        cd $GITHUB_WORKSPACE/bindings/python
        sudo apt-fast install -y virtualenv python3.9
        virtualenv -p python3.9 ./venvs/python3.9
        source venvs/python3.9/bin/activate
        pip install -U cython wheel
        BUILDING_SYNTHIZER=1 python setup.py sdist
        deactivate
    - name: Upload Artifacts
      uses: actions/upload-artifact@v2
      with:
        name: python-sdist
        path: bindings/python/dist/*

  build_docs:
    runs-on: ubuntu-20.04
    steps:
    - name: Checkout
      uses: actions/checkout@v2
    - name: Cache mdbook
      id: cache_mdbook
      uses: actions/cache@v2
      with:
        key: ${{ runner.os }}-mdbook
        path: |
          ~/mdbook
    - name: Install mdbook
      if: steps.cache_mdbook.outputs.cache-hit != 'true'
      run: |
        mkdir -p ~/mdbook
        curl -H "Accept-Encoding: gzip" https://files.ahicks.io/synthizer_ci/mdbook/mdbook | gunzip - > ~/mdbook/mdbook
        curl -H "Accept-Encoding: gzip" https://files.ahicks.io/synthizer_ci/mdbook/mdbook-linkcheck | gunzip - > ~/mdbook/mdbook-linkcheck
        chmod +x ~/mdbook/*
    - name: Build Manual
      run: |
        cd $GITHUB_WORKSPACE/manual
        export PATH=~/mdbook:$PATH
        mdbook build
    - uses: actions/upload-artifact@v2
      with:
        name: manual
        path: manual/book/html/**

  deploy_docs:
    if: startsWith(github.ref, 'refs/tags') && !github.event_type != 'pull_request'
    runs-on: ubuntu-20.04
    needs: [ 'build_docs', 'windows', 'ubuntu', 'python_sdist', 'osx' ]
    env:
      DOCS_DEPLOY_KEY: ${{secrets.docs_deploy_key}}
      DOCS_DEPLOY_KEY_PUB: ${{secrets.docs_deploy_key_pub}}
    steps:
    - name: Install SSH Deploy Key
      run: |
        mkdir -p ~/.ssh
        echo "$DOCS_DEPLOY_KEY" > ~/.ssh/id_rsa
        echo "$DOCS_DEPLOY_KEY_PUB" > ~/.ssh/id_rsa.pub
        chmod 400 ~/.ssh/id_rsa
    - name: Clone Repository
      run: |
        cd $GITHUB_WORKSPACE
        git clone git@github.com:synthizer/synthizer.github.io .
    - name: Download Docs
      uses: actions/download-artifact@v2
      with:
        name: manual
    - name: Commit and Push Docs
      run: |
        git config --global user.name "Synthizer CI"
        git config --global user.email "ahicks@ahicks.io"
        git add -A
        git commit -m "Docs deployed at $(date)"
        git push

  github_release:
    needs: [ "build_docs", "windows", "python_sdist", "ubuntu", "osx" ]
    if: startsWith(github.ref, 'refs/tags') && !github.event_type != 'pull_request'
    runs-on: ubuntu-20.04
    steps:
    - name: Download Docs
      uses: actions/download-artifact@v2
      with:
        name: manual
        path: ~/artifacts/manual
    - name: Zip Docs
      run: |
        zip -r ~/artifacts/manual.zip ~/artifacts/manual
        # get it out of the way so that the uploads don't freak out.
        rm -rf ~/artifacts/manual
        ls ~/artifacts
    - name: Download Windows Wheels 32-bit
      uses: actions/download-artifact@v2
      with:
        name: python-wheels-win32
        path: ~/artifacts
    - name: Download Windows Wheels 64-bit
      uses: actions/download-artifact@v2
      with:
        name: python-wheels-win64
        path: ~/artifacts
    - name: Download Python sdist
      uses: actions/download-artifact@v2
      with:
        name: python-sdist
        path: ~/artifacts
    - name: Create Release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{secrets.GITHUB_TOKEN}}
      with:
        tag_name: ${{github.ref}}
    - name: Upload Artifacts
      uses: alexellis/upload-assets@0.2.2
      env:
        GITHUB_TOKEN: ${{secrets.GITHUB_TOKEN}}
      with:
        asset_paths: '[ "/home/runner/artifacts/*" ]'

  deploy_pypi:
    if: startsWith(github.ref, 'refs/tags') && !github.event_type != 'pull_request'
    needs: [ "build_docs", "windows", "python_sdist", "ubuntu", "osx" ]
    runs-on: ubuntu-20.04
    steps:
    - name: Download Windows Wheels 32-bit
      uses: actions/download-artifact@v2
      with:
        name: python-wheels-win32
        path: ~/artifacts
    - name: Download Windows Wheels 64-bit
      uses: actions/download-artifact@v2
      with:
        name: python-wheels-win64
        path: ~/artifacts
    - name: Download Python sdist
      uses: actions/download-artifact@v2
      with:
        name: python-sdist
        path: ~/artifacts
    - name: Upload to Pypi
      env:
        TWINE_USERNAME: camlorn
        TWINE_PASSWORD: ${{secrets.TWINE_PASSWORD}}
      run: |
        sudo pip3 install twine
        twine upload /home/runner/artifacts/*
