from enum import Enum
from typing import ContextManager, Iterator, List, Optional, Tuple, Union

StringOrBytes = Union[str, bytes]
Double3 = Tuple[float, float, float]
Double6 = Tuple[float, float, float, float, float, float]
EventSourceType = Union["Source", "Generator"]

class LoggingBackend(Enum):
    STDERR: int = ...

STDERR: LoggingBackend = LoggingBackend.STDERR

class LogLevel(Enum):
    DEBUG: int = ...
    ERROR: int = ...
    INFO: int = ...
    WARN: int = ...

DEBUG: LogLevel = LogLevel.DEBUG
INFO: LogLevel = LogLevel.INFO
ERROR: LogLevel = LogLevel.ERROR
WARN: LogLevel = LogLevel.WARN

class DistanceModel(Enum):
    NONE: int = ...
    LINEAR: int = ...
    EXPONENTIAL: int = ...
    INVERSE: int = ...

NONE: DistanceModel = DistanceModel.NONE
LINEAR: DistanceModel = DistanceModel.LINEAR
EXPONENTIAL: DistanceModel
INVERSE: DistanceModel

class NoiseType(Enum):
    FILTERED_BROWN: int = ...
    UNIFORM: int = ...
    VM: int = ...

FILTERED_BROWN: NoiseType = NoiseType.FILTERED_BROWN
UNIFORM: NoiseType = NoiseType.UNIFORM
VM: NoiseType = NoiseType.VM

class PannerStrategy(Enum):
    HRTF: int = ...
    STEREO: int = ...

HRTF: PannerStrategy = PannerStrategy.HRTF
STEREO: PannerStrategy = PannerStrategy.STEREO

# Initialization functions:

def initialized() -> ContextManager[None]: ...
def initialize() -> None: ...
def shutdown() -> None: ...

# Functions for configuring logging:

def configure_logging_backend(backend: LoggingBackend) -> None: ...
def set_log_level(level: LogLevel) -> None: ...

class BiquadConfig:
    @staticmethod
    def design_lowpass(freequency: float, q: float = ...): ...
    @staticmethod
    def design_highpass(frequency: float, q: float = ...): ...
    @staticmethod
    def design_bandpass(frequency: float, bandwidth: float): ...

class _BaseObject:
    def __init__(self, _handle: int) -> None: ...
    def destroy(self) -> None: ...
    def get_userdata(self) -> object: ...
    def set_userdata(self, data: object) -> None: ...

class Pausable(_BaseObject):
    def pause(self) -> None: ...
    def play(self) -> None: ...

class Buffer(_BaseObject):
    @staticmethod
    def from_stream(
        protocol: StringOrBytes, path: StringOrBytes, options: StringOrBytes = ...
    ) -> "Buffer": ...
    def get_channels(self) -> int: ...
    def get_length_in_samples(self) -> int: ...
    def get_length_in_seconds(self) -> float: ...

class Generator(Pausable):
    gain: float = ...
    pitch_bend: float = ...

class Source(Pausable):
    gain: float = ...
    filter: BiquadConfig = ...
    def add_generator(self, generator: Generator) -> None: ...
    def remove_generator(self, generator: Generator) -> None: ...

class GlobalEffect(_BaseObject):
    gain: float = ...
    filter_input: BiquadConfig = ...
    def reset(self) -> None: ...

class Context(Pausable):
    closeness_boost: float = ...
    closeness_boost_distance: float = ...
    distance_max: float = ...
    distance_model: DistanceModel = LINEAR
    distance_ref: float = ...
    gain: float = ...
    orientation: Double6 = ...
    panner_strategy: PannerStrategy = ...
    position: Double3 = ...
    rolloff: float = ...
    def __init__(self, enable_events: bool = ...) -> None: ...
    def config_route(
        self,
        output: Source,
        input: GlobalEffect,
        gain: float = ...,
        fade_time: float = ...,
        filter: BiquadConfig = ...,
    ) -> None: ...
    def enable_events(self) -> None: ...
    def get_events(self, limit: int = ...) -> Iterator["Event"]: ...
    def remove_route(
        self, output: Source, input: GlobalEffect, fade_time: float = ...
    ) -> None: ...

class DirectSource(Source):
    def __init__(self, context: "Context") -> None: ...

class PannedSourceCommon(Source):
    panner_strategy: PannerStrategy = ...

class PannedSource(PannedSourceCommon):
    azimuth: float = ...
    elevation: float = ...
    panning_scalar: float = ...
    def __init__(self, context: "Context") -> None: ...

class Source3D(PannedSourceCommon):
    closeness_boost: float = ...
    closeness_boost_distance: float = ...
    distance_max: float = ...
    distance_model: DistanceModel = LINEAR
    distance_ref: float = ...
    orientation: Double6 = ...
    position: Double3 = ...
    rolloff: float = ...
    def __init__(self, context: "Context") -> None: ...

class BufferGenerator(Generator):
    buffer: Optional[Buffer] = None
    looping: bool = False
    position: float = ...
    def __init__(self, context: Context) -> None: ...

class EchoTapConfig:
    delay: float
    gain_l: float
    gain_r: float
    def __init__(self, delay: float, gain_l: float, gain_r: float) -> None: ...

class Event:
    context: Context
    source: Optional[EventSourceType]
    def __init__(self, context: Context, source: Optional[EventSourceType]) -> None: ...

class FinishedEvent(Event):
    pass

class LoopedEvent(Event):
    pass

class GlobalEcho(GlobalEffect):
    def __init__(self, context: Context) -> None: ...
    def set_taps(self, taps: List[EchoTapConfig]) -> None: ...

class GlobalFdnReverb(GlobalEffect):
    late_reflections_delay: float = ...
    late_reflections_diffusion: float = ...
    late_reflections_hf_reference: float = ...
    late_reflections_hf_rolloff: float = ...
    late_reflections_lf_reference: float = ...
    late_reflections_lf_rolloff: float = ...
    late_reflections_modulation_depth: float = ...
    late_reflections_modulation_frequency: float = ...
    mean_free_path: float = ...
    t60: float = ...
    def __init__(self, context: Context) -> None: ...

class NoiseGenerator(Generator):
    noise_type: NoiseType = ...
    def __init__(self, context: Context, channels: int = ...) -> None: ...

class StreamingGenerator(Generator):
    looping: bool = False
    position: float = ...
    def __init__(
        self,
        context: Context,
        protocol: StringOrBytes,
        path: StringOrBytes,
        options: StringOrBytes = ...,
    ) -> None: ...

class SynthizerError(Exception): ...
